unit TestPasParserpas;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SimpleParser.Lexer.Types, FindUnit.DcuDecompiler,
  FindUnit.PasParser, Generics.Collections, FindUnit.IncluderHandlerInc, Classes,
  SysUtils, ComCtrls, FindUnit.Header, FindUnit.Utils, DelphiAST.Classes;

type
  // Test methods for class TPasFileParser

  TestTPasFileParser = class(TTestCase)
  strict private
    FPasFileParser: TPasFileParser;
  private
    FFilePath: string;

    function CompareListWithText(List: TStrings; ExpectItems: TArray<string>): Boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestProcess;
  end;

implementation

const
  TEST_FILE_NAME = 'TestPasParserFont';

function TestTPasFileParser.CompareListWithText(List: TStrings; ExpectItems: TArray<string>): Boolean;
var
  I: Integer;
begin
  Result := List.Count = Length(ExpectItems);
  if not Result then
    Exit;

  for I := 0 to Length(ExpectItems) -1 do
    if List.IndexOf(ExpectItems[I]) = -1 then
      Exit(False);
end;

procedure TestTPasFileParser.SetUp;
begin
  FFilePath := ExtractFilePath(ParamStr(0));
  FFilePath := Fetch(FFilePath, '\Test\');
  FFilePath := FFilePath + '\Test\TestPasParser\' + TEST_FILE_NAME + '.pas';
  FPasFileParser := TPasFileParser.Create(FFilePath);
end;

procedure TestTPasFileParser.TearDown;
begin
  FPasFileParser.Free;
  FPasFileParser := nil;
end;

procedure TestTPasFileParser.TestProcess;
var
  PasResult: TPasFile;
begin
  PasResult := FPasFileParser.Process;

  Assert(PasResult.FilePath = FFilePath, 'Wrong file path');
  Assert(PasResult.OriginUnitName = TEST_FILE_NAME, 'Wrong file path');
  Assert((PasResult.Procedures.Count = 1) and (CompareListWithText(PasResult.Procedures, ['YesOutProcedure'])), 'Wrong procedure list');
  Assert((PasResult.Functions.Count = 1) and (CompareListWithText(PasResult.Functions, ['YesOutFunction'])), 'Wrong function list');
  Assert((PasResult.Constants.Count = 2) and (CompareListWithText(PasResult.Constants, ['TEST_CONT', 'TEST_CONT_BREAK'])), 'Wrong const list');
  Assert((PasResult.ClassFunctions.Count = 1) and (CompareListWithText(PasResult.ClassFunctions, ['YesShowFunction'])), 'Wrong class function list');
  Assert((PasResult.ClassProcedure.Count = 1) and (CompareListWithText(PasResult.ClassProcedure, ['YesShow'])), 'Wrong class procedure list');
  Assert((PasResult.Classes.Count = 9), 'Wrong class list');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPasFileParser.Suite);
end.

